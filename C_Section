/*
 * Group17_C_Section.c
 *
 * Created: 30/08/2018 1:00:57 PM
 * Author : vsta598
 */ 


//~~~~~~~~~~~~~~~~~~~~~Includes~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
#include <avr/io.h>
#include <avr/interrupt.h>
#include "usart.h"
#include "adc.h"
#include "interrupt.h"
#include "algorithm.h"


//~~~~~~~~~~~~~~~~~~~~~Global Variables~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
volatile uint8_t skip = 1; //acts as a boolean.

//~~~~~~~~~~~~~~~~~~~~~Main Function~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
int main(void)
{
	//~~~~~~~~~~~~~~~~~~~~~Initializations~~~~~~~~~~~~~~~~~~~~~~//
	usart_init(UBRR);
	ADC_init();
	enable_ext_interrupt();
	sei(); //Enable global interrupts.
	
	
	//~~~~~~~~~~~~~~~~~~~~~Variable Declarations~~~~~~~~~~~~~~~~~~~~~~~~~~//
	
	//TEST VARIABLES//
	uint16_t i_rms = 133;
	uint16_t v_peak = 918;
	uint16_t p_avg = 59;
	uint8_t v_trans[4] = {0,0,0,0}; //Voltage value to be transmitted.
	uint8_t i_trans[4] = {0,0,0,0}; //Current value to be transmitted.
	uint8_t p_trans[4] = {0,0,0,0}; //Power value to be transmitted.
	
	//ADC VARIABLES//
	uint16_t voltageSense[ROW_SIZE][MAX_NUM_OF_SAMPLES];
	uint16_t currentSense[ROW_SIZE][MAX_NUM_OF_SAMPLES];
	uint8_t firstInterrupt = 1;
	
	//Control Variables
	uint8_t process = 0; //acts as a boolean.
	
	
	//Array of pointers which points to the arrays that hold the individual digits of RMS current,
	//v peak, and average power, to be sent by the micro controller. 
	uint8_t *outputPTRs[3] = {v_trans, i_trans, p_trans}; 
	
	
	
    //~~~~~~~~~~~~~~~~~~~~~While Loop~~~~~~~~~~~~~~~~~~~~~~~~~~//
    while (1) 
    {
		//When the first interrupt occurs then we will sample the voltage, when a second interrupt occurs then we will sample current.
		//"Skip" variable prevents us from entering the function until an interrupt is called. Otherwise there may be a situation
		//where the interrupt will occur whilst we are inside the function.
		if(firstInterrupt && !(skip)){
			noInterrupt(); //Disable interrupts from Pin 32.
			skip = sampleWaveform(voltageSense);
			firstInterrupt = 0;
			continueInterrupt(); //Renable interrupts from Pin 32.
			
		} else if (!(firstInterrupt) && !(skip)){
			noInterrupt();
			skip = sampleWaveform(currentSense);
			firstInterrupt = 1;
			process = 1;
			
		}
		
		//Only enter the for loop when we have meaningful values.
		if(process){
			//For loop that converts all ADC values to their load voltage and current values.
			for(uint8_t i = 0; i < MAX_NUM_OF_SAMPLES; i++){
				voltageSense[i] = convertADC(voltageSense[i]);
				voltageSense[i] = removeOffsetAndGain(voltageSense[i], 'v');
				voltageSense[i] = getTrueValues(voltageSense[i], 'v');
				
				currentSense[i] = convertADC(currentSense[i]);
				currentSense[i] = removeOffsetAndGain(currentSense[i], 'i');
				currentSense[i] = getTrueValues(currentSense[i],'i');
				
			}
			
		}	
		
		
		convertForTransmit(v_peak, 'v', v_trans);
		convertForTransmit(i_rms, 'i', i_trans);
		convertForTransmit(p_avg, 'p', p_trans);
		
		sendToCPLD(outputPTRs);
		
		
    }


}
